generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Order {
  orderId     Int         @id @default(autoincrement())
  userId      Int
  orderDate   DateTime
  totalAmount Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Order_userId_fkey")
  orderItems  OrderItem[]
  payments    Payment[]

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  orderItemId Int     @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  order       Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade, map: "OrderItem_orderId_fkey")
  product     Product @relation(fields: [productId], references: [productId], onDelete: Cascade, map: "OrderItem_productId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Payment {
  paymentId     Int      @id @default(autoincrement())
  orderId       Int
  paymentDate   DateTime
  paymentStatus Boolean
  order         Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade, map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

model Product {
  productId     Int         @id @default(autoincrement())
  productName   String
  price         Int
  stockQuantity Int
  sellerId      Int
  orderItems    OrderItem[]
  seller        User        @relation(fields: [sellerId], references: [id], onDelete: Cascade, map: "Product_sellerId_fkey")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique(map: "User_email_key")
  password  String
  role      String    @default("user")
  createdAt DateTime  @default(now())
  orders    Order[]
  products  Product[]
}
